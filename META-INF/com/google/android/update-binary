#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R $1.$2 $i; chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
abort() { ui_print "$*"; umount /system; umount /data; exit 1; }

show_progress 1.34 4;
ui_print " ";
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;
ui_print "AnyKernel2 by osm0sis @ xda-developers";
ui_print " ";
ui_print "    __    _       __    __        _";
ui_print "   / /   (_)___ _/ /_  / /_____  (_)___  ____ _"
ui_print "  / /   / / __ \`/ __ \\/ __/ __ \\/ / __ \\/ __ \`/"
ui_print " / /___/ / /_/ / / / / /_/ / / / / / / / /_/ /"
ui_print "/_____/_/\\__, /_/ /_/\\__/_/ /_/_/_/ /_/\\__, /"
ui_print "        /____/                        /____/" 
ui_print "    __ _                      __";
ui_print "   / //_/__  _________  ___  / /"  
ui_print "  / ,< / _ \\/ ___/ __ \\/ _ \\/ /"              
ui_print " / /| /  __/ /  / / / /  __/ /"               
ui_print "/_/ |_\\___/_/  /_/ /_/\\___/_/"
ui_print " ";
ui_print "Thanks deadlyindian for beautifying the installer";
ui_print "hope you enjoy this kernel";
umount /system;
mount -o ro -t auto /system;
mount /data;
test -f /system/system/build.prop && root=/system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking device...";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "$testname";
      match=1;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "Unsupported device. Aborting...";
  fi;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.initd)" == 1 ]; then
  ui_print "Creating init.d...";
  ui_print " ";
  mount -o rw,remount -t auto /system;
  mkdir $root/system/etc/init.d;
  set_perm_recursive 0 0 0755 0755 $root/system/etc/init.d;
  mount -o ro,remount -t auto /system;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.ukm)" == 1 ]; then
  ui_print " ";
  mkdir -p /tmp/synapse;
  cd /tmp/synapse;
  unzip -o "$ZIP";
  set_perm_recursive 0 0 0777 0777 /tmp/synapse;

  ui_print "***********************************************";
  ui_print "*               Welcome to the                *";
  ui_print "*          Universal Kernel Manager           *";
  ui_print "*             Created by apb_axel             *";
  ui_print "*             Modified by yarpiin             *";
  ui_print "***********************************************";
  ui_print "";
  ui_print "";

  /sbin/busybox mount /system;

  ui_print "* Installing UKM";
  mount -o remount,rw /system;
  rm -rf /data/UKM/*;
  rm -rf /system/etc/init.d/UKM;
  rm -rf /system/xbin/uci;
  rm -rf /system/addon.d/UKM.sh;
  cp -fvr /tmp/synapse/data/* /data;
  cp -f /tmp/synapse/data/UKM/uci /system/xbin/uci;
  cp -f /tmp/synapse/data/UKM/busybox /system/xbin/busybox;
  cp -f /tmp/synapse/data/UKM/UKM /system/etc/init.d/UKM;
  set_perm_recursive 0 0 0755 0755 /data/UKM;
  set_perm_recursive 0 0 0755 0755 /system/xbin/uci;
  set_perm_recursive 0 0 0755 0755 /system/xbin/busybox;
  set_perm_recursive 0 0 0755 0755 /system/etc/init.d/UKM;
  mount -o remount,ro /system;
  
  ui_print "Installing Synapse...";
  mount -o remount,rw /system;
  mkdir /system/app/Synapse;
  set_perm_recursive 0 0 0755 0755 /system/app/Synapse;
  cp -f /tmp/synapse/system/app/Synapse/Synapse.apk /system/app/Synapse/Synapse.apk;
  set_perm_recursive 0 0 0755 0644 /system/app;  
fi;

ui_print "Installing kernel...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print " ";
  ui_print "Pushing modules...";
  mount -o rw,remount -t auto /system;
  cp -rf /tmp/anykernel/modules/* $root/system/lib/modules/;
  set_perm_recursive 0 0 0755 0644 $root/system/lib/modules;
  mount -o ro,remount -t auto /system;
fi;

mount -o rw,remount -t auto /system;
rm -rf /system/etc/init.qcom.post_boot.sh;
cp -f /tmp/anykernel/etc/init.qcom.post_boot.sh /system/etc/init.qcom.post_boot.sh;
set_perm_recursive 0 0 0755 0755 /system/etc/init.qcom.post_boot.sh;
mount -o ro,remount -t auto /system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.system_blobs)" == 1 ]; then
  ui_print "* Pushing System Blobs...";
  ui_print " ";
  mount -o remount,rw -t auto /system;
  cp -rf /tmp/anykernel/system/lib/libcutils.so /system/lib/libcutils.so;
  cp -rf /tmp/anykernel/system/lib64/libcutils.so /system/lib64/libcutils.so;
  set_perm_recursive 0 0 0755 0755 /system/lib;
  set_perm_recursive 0 0 0755 0755 /system/lib64;
  mount -o remount,ro -t auto /system;		
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  rm -rf /tmp/anykernel;
fi;

umount /system;
umount /data;
ui_print " ";
ui_print "Done!";

